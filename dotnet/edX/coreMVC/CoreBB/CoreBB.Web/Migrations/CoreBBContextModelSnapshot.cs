// <auto-generated />
using System;
using CoreBB.Web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreBB.Web.Migrations
{
    [DbContext(typeof(CoreBBContext))]
    partial class CoreBBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CoreBB.Web.Models.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsLocked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Forum");
                });

            modelBuilder.Entity("CoreBB.Web.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("FromUserId")
                        .HasColumnName("FromUserID");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime>("SendDateTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ToUserId")
                        .HasColumnName("ToUserID");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("CoreBB.Web.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("ForumId")
                        .HasColumnName("ForumID");

                    b.Property<bool>("IsLocked");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID");

                    b.Property<DateTime?>("ModifyDateTime");

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<DateTime>("PostDateTime");

                    b.Property<int?>("ReplyToTopicId")
                        .HasColumnName("ReplyToTopicID");

                    b.Property<int?>("RootTopicId")
                        .HasColumnName("RootTopicID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReplyToTopicId");

                    b.HasIndex("RootTopicId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("CoreBB.Web.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsAdministrator");

                    b.Property<bool>("IsLocked");

                    b.Property<DateTime>("LastLogInDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("RegisterDateTime");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CoreBB.Web.Models.Forum", b =>
                {
                    b.HasOne("CoreBB.Web.Models.User", "Owner")
                        .WithMany("Forum")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Forum_Owner");
                });

            modelBuilder.Entity("CoreBB.Web.Models.Message", b =>
                {
                    b.HasOne("CoreBB.Web.Models.User", "FromUser")
                        .WithMany("MessageFromUser")
                        .HasForeignKey("FromUserId")
                        .HasConstraintName("FK_Message_FromUser");

                    b.HasOne("CoreBB.Web.Models.User", "ToUser")
                        .WithMany("MessageToUser")
                        .HasForeignKey("ToUserId")
                        .HasConstraintName("FK_Message_ToUser");
                });

            modelBuilder.Entity("CoreBB.Web.Models.Topic", b =>
                {
                    b.HasOne("CoreBB.Web.Models.Forum", "Forum")
                        .WithMany("Topic")
                        .HasForeignKey("ForumId")
                        .HasConstraintName("FK_Topic_Forum")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreBB.Web.Models.User", "ModifiedByUser")
                        .WithMany("TopicModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Topic_ModifiedByUser");

                    b.HasOne("CoreBB.Web.Models.User", "Owner")
                        .WithMany("TopicOwner")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Topic_Owner");

                    b.HasOne("CoreBB.Web.Models.Topic", "ReplyToTopic")
                        .WithMany("InverseReplyToTopic")
                        .HasForeignKey("ReplyToTopicId")
                        .HasConstraintName("FK_Topic_ReplyToTopic");

                    b.HasOne("CoreBB.Web.Models.Topic", "RootTopic")
                        .WithMany("InverseRootTopic")
                        .HasForeignKey("RootTopicId")
                        .HasConstraintName("FK_Topic_RootTopic");
                });
#pragma warning restore 612, 618
        }
    }
}
